// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oms/objects.proto

#ifndef PROTOBUF_oms_2fobjects_2eproto__INCLUDED
#define PROTOBUF_oms_2fobjects_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace omsproto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_oms_2fobjects_2eproto();
void protobuf_AssignDesc_oms_2fobjects_2eproto();
void protobuf_ShutdownFile_oms_2fobjects_2eproto();

class GameObject;
class GameObjectSet;

// ===================================================================

class GameObject : public ::google::protobuf::Message {
 public:
  GameObject();
  virtual ~GameObject();

  GameObject(const GameObject& from);

  inline GameObject& operator=(const GameObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameObject& default_instance();

  void Swap(GameObject* other);

  // implements Message ----------------------------------------------

  GameObject* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameObject& from);
  void MergeFrom(const GameObject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated float position = 3 [packed = true];
  inline int position_size() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 3;
  inline float position(int index) const;
  inline void set_position(int index, float value);
  inline void add_position(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      position() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_position();

  // optional bool is_visible = 4;
  inline bool has_is_visible() const;
  inline void clear_is_visible();
  static const int kIsVisibleFieldNumber = 4;
  inline bool is_visible() const;
  inline void set_is_visible(bool value);

  // optional uint32 entity_id = 5;
  inline bool has_entity_id() const;
  inline void clear_entity_id();
  static const int kEntityIdFieldNumber = 5;
  inline ::google::protobuf::uint32 entity_id() const;
  inline void set_entity_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:omsproto.GameObject)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_is_visible();
  inline void clear_has_is_visible();
  inline void set_has_entity_id();
  inline void clear_has_entity_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  bool is_visible_;
  ::google::protobuf::RepeatedField< float > position_;
  mutable int _position_cached_byte_size_;
  ::google::protobuf::uint32 entity_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_oms_2fobjects_2eproto();
  friend void protobuf_AssignDesc_oms_2fobjects_2eproto();
  friend void protobuf_ShutdownFile_oms_2fobjects_2eproto();

  void InitAsDefaultInstance();
  static GameObject* default_instance_;
};
// -------------------------------------------------------------------

class GameObjectSet : public ::google::protobuf::Message {
 public:
  GameObjectSet();
  virtual ~GameObjectSet();

  GameObjectSet(const GameObjectSet& from);

  inline GameObjectSet& operator=(const GameObjectSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameObjectSet& default_instance();

  void Swap(GameObjectSet* other);

  // implements Message ----------------------------------------------

  GameObjectSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameObjectSet& from);
  void MergeFrom(const GameObjectSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .omsproto.GameObject objects = 1;
  inline int objects_size() const;
  inline void clear_objects();
  static const int kObjectsFieldNumber = 1;
  inline const ::omsproto::GameObject& objects(int index) const;
  inline ::omsproto::GameObject* mutable_objects(int index);
  inline ::omsproto::GameObject* add_objects();
  inline const ::google::protobuf::RepeatedPtrField< ::omsproto::GameObject >&
      objects() const;
  inline ::google::protobuf::RepeatedPtrField< ::omsproto::GameObject >*
      mutable_objects();

  // @@protoc_insertion_point(class_scope:omsproto.GameObjectSet)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::omsproto::GameObject > objects_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_oms_2fobjects_2eproto();
  friend void protobuf_AssignDesc_oms_2fobjects_2eproto();
  friend void protobuf_ShutdownFile_oms_2fobjects_2eproto();

  void InitAsDefaultInstance();
  static GameObjectSet* default_instance_;
};
// ===================================================================


// ===================================================================

// GameObject

// required uint32 id = 1;
inline bool GameObject::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameObject::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameObject::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameObject::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 GameObject::id() const {
  return id_;
}
inline void GameObject::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool GameObject::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameObject::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameObject::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameObject::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GameObject::name() const {
  return *name_;
}
inline void GameObject::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GameObject::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GameObject::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameObject::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GameObject::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GameObject::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated float position = 3 [packed = true];
inline int GameObject::position_size() const {
  return position_.size();
}
inline void GameObject::clear_position() {
  position_.Clear();
}
inline float GameObject::position(int index) const {
  return position_.Get(index);
}
inline void GameObject::set_position(int index, float value) {
  position_.Set(index, value);
}
inline void GameObject::add_position(float value) {
  position_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
GameObject::position() const {
  return position_;
}
inline ::google::protobuf::RepeatedField< float >*
GameObject::mutable_position() {
  return &position_;
}

// optional bool is_visible = 4;
inline bool GameObject::has_is_visible() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameObject::set_has_is_visible() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameObject::clear_has_is_visible() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameObject::clear_is_visible() {
  is_visible_ = false;
  clear_has_is_visible();
}
inline bool GameObject::is_visible() const {
  return is_visible_;
}
inline void GameObject::set_is_visible(bool value) {
  set_has_is_visible();
  is_visible_ = value;
}

// optional uint32 entity_id = 5;
inline bool GameObject::has_entity_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameObject::set_has_entity_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameObject::clear_has_entity_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameObject::clear_entity_id() {
  entity_id_ = 0u;
  clear_has_entity_id();
}
inline ::google::protobuf::uint32 GameObject::entity_id() const {
  return entity_id_;
}
inline void GameObject::set_entity_id(::google::protobuf::uint32 value) {
  set_has_entity_id();
  entity_id_ = value;
}

// -------------------------------------------------------------------

// GameObjectSet

// repeated .omsproto.GameObject objects = 1;
inline int GameObjectSet::objects_size() const {
  return objects_.size();
}
inline void GameObjectSet::clear_objects() {
  objects_.Clear();
}
inline const ::omsproto::GameObject& GameObjectSet::objects(int index) const {
  return objects_.Get(index);
}
inline ::omsproto::GameObject* GameObjectSet::mutable_objects(int index) {
  return objects_.Mutable(index);
}
inline ::omsproto::GameObject* GameObjectSet::add_objects() {
  return objects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::omsproto::GameObject >&
GameObjectSet::objects() const {
  return objects_;
}
inline ::google::protobuf::RepeatedPtrField< ::omsproto::GameObject >*
GameObjectSet::mutable_objects() {
  return &objects_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace omsproto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_oms_2fobjects_2eproto__INCLUDED
